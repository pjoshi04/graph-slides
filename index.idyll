[meta title:"Slideshow" description:"Short description of your project" /]

[var name:"currentSlide" value:0 /]
[var name:"numSlides" value:0 /]

[Slideshow currentSlide:currentSlide numSlides:numSlides fullWidth:true]


  [Slide]
    [Header
      title:"An Introduction to Graphs"
      subtitle:"(Graph Theory/Mathematics)"
      author:"Pratham Joshi ('dash-ian)"
      fullWidth:true color:"black" background:"#fff" /]
    [NetworkGraph /]
  [/Slide]

  [Slide]
    ## An Introduction to Graphs: Agenda

* What is a Graph?
* Example Usage of Graphs
* Graph Terminology
* Nodes and Edges
* Weights
* Direction
* Graph Data Structure Representations
* Graph Traversal Algorithms
* Breadth-first Search (BFS)
* Depth-first Search (DFS)
* Further Topics

  [/Slide]

    [Slide]
    ## So what is a graph? 

* From Wikipedia:

"In mathematics, and more specifically in graph theory,
a graph is a structure amounting to a **set of objects** in which
some pairs of the objects are in some sense **related**."

* Each object = **Node** or **Vertex**
* Each relation = **Edge**

[NetworkGraph /]


  [/Slide]

   [Slide]
  ## But what are these **objects** and what are these **relations**?
  [/Slide]

  [Slide]
  ## Exhibit A: HVV
  [img src:"static/images/hvv.png" className:"hvv" /]
  [/Slide]

  [Slide]
  ## Exhibit B: The DASHboard

  [img src:"static/images/dash.png" className:"dash" /]
  [/Slide]

  [Slide]
  ## Exhibit C: KarDASHiansâ„¢

  [img src:"static/images/kard.png" className:"hvv" /]
  [/Slide]

   [Slide]
  ## Graph Terminology: Direction

* A directed graph (or digraph) is a graph that is made up of a set of vertices connected by edges,
  where the edges have a direction associated with them. 

* NodeA -> Node B != NodeB -> NodeA

  [DirectedGraph /]
 
  [/Slide]

  
   [Slide]
  ## Graph Terminology: Weights

* A weighted graph is a graph in which each branch is given a numerical weight.

* The weight determines the **magnitude** of the edge. Eg. distance


  [WeightedGraph /]
 
  [/Slide] 


  [Slide]
    ## Graph Respresentations A: Adjacency Matrix

   [img src:"static/images/matrix.jpg" /]

  [/Slide]

  [Slide]
    ## Graph Representations B: Adjacency Lists 

    [img src:"static/images/list.png"  className:"list"/]

    Adjacency List Representation:

    ```
    {
      "a" = ["b", "c", "d"]
      "b" = ["a", "d", "e"]
      "c" = ["a","d"]
      "d" = ["a", "b", "c", "d", "e"]
      "e" = ["b", "e"]
    }
    ```

  [/Slide]

  [Slide]
## Graph Operations (abstractions):

* addNode(node)

  * addEdge(node1, node2, (weight))

  * getEdges(node) 
  [/Slide]

  [Slide]
    # Graph Traversal Algorithms: 
  
* Breadth-first Traversal
* Depth-first Traversal

    [img src:"static/images/bfsdfs.png" /]
  [/Slide]
  [Slide]
    # Implementation: Breadth-first Traversal (BFS)

    ```
      Taking graph G and start vertex start_v
      BFS(G, start_v, (end_v)):
        initialize new queue Q (FIFO)
        Mark start_v as discovered
        push start_v to Q \\ i.e. Q.push(start_v)
        while Q is not empty:
            pop next vertex v from Q
            // (if v equals end_v:
            //     return v )
            for all edges from v to w in G.getEdges(v):
              if w is not discovered:
                  label w as discovered
                  Q.enqueue(w)
    ```
  [/Slide]
  [Slide]
    # Breadth-first Search
    [var name:"bfs" value:`false ` /]
    [BfsGraph runBfs:bfs testColor:"red"/]
    [Button onClick:`bfs = !bfs `]
    BFS
    [/Button]
  [/Slide]
  [Slide]
    # Implementation: Depth-first Traversal (DFS)

    ```
    Taking graph G and start vertex v:
    DFS(G, v): 
      mark v as discovered // eg. add to a stack
      for all edges from v to w in G.getEdges(v):
        if (w is not yet discovered): //eg. by checking discovered stack
          DFS(g, w) // recurse with new vertex w
    ```
    [img src:"static/images/dfs.gif" className:"dfsGif" /]
  [/Slide]
[Slide]
## Shortest-path Problem

* We already saw one!: BFS for shortest path when Graph is **unweighted**:
 ```
    Taking graph G and start vertex start_v
    BFS(G, start_v, end_v):
      initialize new queue Q (FIFO)
      Mark start_v as discovered
      push start_v to Q \\ i.e. Q.push(start_v)
      while Q is not empty:
          pop next vertex v from Q
          if v equals end_v:
              return v 
          for all edges from v to w in G.getEdges(v):
            if w is not discovered:
                label w as discovered
                Q.enqueue(w)
  ```
* Dijkstra's Algorithm
[/Slide]
  
[Slide]
  ## Travelling Salesman Problem

```
Given a list of cities and the distances between each pair of cities,
what is the shortest possible route that visits each city
and returns to the origin city?
```
* The traveling salesman problem is **NP-hard** (non-deterministic polynomial)
[img src:"static/images/tour.png" className:"tour" /]

[/Slide]
  [Slide]
    # Thank You! XKCD 399:
    [img src:"static/images/tsp.png" className:"hvv" /]
  References: 
  - Grokking Algorithms, CLRS Algorithms, Wikipedia
  
  Tools:
  - Idyll, D3.js
  [/Slide]
 

[/Slideshow]