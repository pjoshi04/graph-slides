[meta title:"Slideshow" description:"Short description of your project" /]

[var name:"currentSlide" value:0 /]
[var name:"numSlides" value:0 /]

[Slideshow currentSlide:currentSlide numSlides:numSlides fullWidth:true]


  [Slide]
    [Header
      title:"An Introduction to Graphs"
      subtitle:"(Graph Theory/Mathematics)"
      author:"Pratham Joshi"
      fullWidth:true color:"black" background:"#fff" /]
    [NetworkGraph /]
  [/Slide]

  [Slide]
    ## An Introduction to Graphs: Agenda

* What is a Graph?
* Example Usage of Graphs
* Graph Terminology
* Nodes and Edges
* Weights
* Direction
* Cycles
* Graph Data Structure Representations
* Graph Traversal Algorithms
* Breadth-first Search (BFS)
* Depth-first Search (DFS)
* Further Topics

  [/Slide]

    [Slide]
    ## So what is a graph? 

* From Wikipedia:

"In mathematics, and more specifically in graph theory,
a graph is a structure amounting to a **set of objects** in which
some pairs of the objects are in some sense **related**."

* Each object = **Node** or **Vertex**
* Each relation = **Edge**

[NetworkGraph /]


  [/Slide]

   [Slide]
  ## But what are these **objects** and what are these **relations**?
  [/Slide]

  [Slide]
  ## Exhibit A: HVV
  [img src:"static/images/hvv.png" className:"hvv" /]
  [/Slide]

  [Slide]
  ## Exhibit B: The DASHboard

  [img src:"static/images/dash.png" className:"dash" /]
  [/Slide]

  [Slide]
  ## Exhibit C: KarDASHiansâ„¢

  [img src:"static/images/kard.png" className:"hvv" /]
  [/Slide]

   [Slide]
  ## Graph Terminology: Direction

  A directed graph (or digraph) is a graph that is made up of a set of vertices connected by edges,
  where the edges have a direction associated with them. 

  [DirectedGraph /]
 
  [/Slide]

  
   [Slide]
  ## Graph Terminology: Weights

  A weighted graph is a graph in which each branch is given a numerical weight.


  [WeightedGraph /]
 
  [/Slide] 
 

  [Slide]
    ## Graph Respresentations A: Adjacency Matrix

   [img src:"static/images/matrix.jpg" /]

  [/Slide]

  [Slide]
    ## Graph Representations B: Adjacency Lists 

    [img src:"static/images/list.png"  className:"list"/]

    Adjacency List Representation:

    ```
    {
      "a" = ["b", "c", "d"]
      "b" = ["a", "d", "e"]
      "c" = ["a","d"]
      "d" = ["a", "b", "c", "d", "e"]
      "e" = ["b", "e"]
    }
    ```

  [/Slide]

  [Slide]
## Graph Operations (abstractions):

* addNode(node)

  * addEdge(node1, node2, (weight))

  * getEdges(node) 
  [/Slide]

  [Slide]
    # Graph Traversal Algorithms: Breadth-first Traversal(BFS)

    [img src:"static/images/bfs.gif" className:"bfsGif" /]
  [/Slide]
  [Slide]
    # Graph Traversal Algorithms: Depth-first Traversal(DFS)
    [img src:"static/images/dfs.gif" className:"dfsGif" /]
  [/Slide]
  [Slide]
    # Implementation: Breadth-first Traversal(BFS)

    ```
      procedure BFS(G, start_v) is
     let Q be a queue
      label start_v as discovered
      Q.enqueue(start_v)
      while Q is not empty do
          // v := Q.dequeue()
          // if v is the goal then
          //     return v
          for all edges from v to w in G.adjacentEdges(v) do
             if w is not labeled as discovered then
                 label w as discovered
                 w.parent := v
                 Q.enqueue(w)
    ```
  [/Slide]
  [Slide]
    # Breadth-first Search
    [var name:"bfs" value:`false ` /]
    [BfsGraph runBfs:bfs testColor:"red"/]
    [Button onClick:`bfs = !bfs `]
    BFS
    [/Button]
  [/Slide]
  [Slide]
    # Implementation: Depth-first Traversal(DFS)

    ```
    procedure DFS(G, v) is
    label v as discovered
    for all directed edges from v to w that are in G.adjacentEdges(v) do
        if vertex w is not labeled as discovered then
            recursively call DFS(G, w)
    ```
  [/Slide]
  
  
[Slide]
  ## More graph? 

* Shortest-path Problem:
* BFS for shortest-path when there are no weights (we already saw how it works!)
* Dijkstra's Algorithm
* Travelling Salesman Problem
[img src:"static/images/tour.png" className:"tour" /]

[/Slide]
  [Slide]
    # Thank You! XKCD 399:
    [img src:"static/images/tsp.png" className:"hvv" /]
  [/Slide]


[/Slideshow]