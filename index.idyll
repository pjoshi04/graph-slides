[meta title:"Slideshow" description:"Short description of your project" /]

[var name:"currentSlide" value:0 /]
[var name:"numSlides" value:0 /]

[Slideshow currentSlide:currentSlide numSlides:numSlides fullWidth:true]


  [Slide]
    [Header
      title:"An Introduction to Graphs"
      subtitle:"Graph Theory"
      author:"Pratham Joshi"
      fullWidth:true color:"black" background:"#fff" /]
    [NetworkGraph /]
  [/Slide]

  [Slide]
    ## An Introduction to Graphs: Main Agenda

* What is a Graph?
* Example Usage of Graphs
* Graph Terminology
* Nodes and Edges
* Weights
* Direction
* Cycles
* Graph Data Structure Representations
* Graph Traversal Algorithms
* Breadth-first Search (BFS)

  [/Slide]

  [Slide]
    ## An Introduction to Graphs: Further Topics

* Depth-first Search (DFS)
* Shortest Path Problem
* Dijkstra's Algorithm
* The Travelling Salesperson

  [/Slide]

    [Slide]
    ## So what is a graph? 

* From Wikipedia:

"In mathematics, and more specifically in graph theory,
a graph is a structure amounting to a **set of objects** in which
some pairs of the objects are in some sense **related**."

* Each object = **Node** or **Vertex**
* Each relation = **Edge**

[NetworkGraph /]


  [/Slide]

   [Slide]
  ## But what are these **objects** and what are these **relations**?
  [/Slide]

  [Slide]
  ## Exhibit A: HVV
  [img src:"static/images/hvv.png" className:"hvv" /]
  [/Slide]

  [Slide]
  ## Exhibit B: The DASHboard

  [img src:"static/images/dash.png" className:"dash" /]
  [/Slide]

  [Slide]
  ## Exhibit C: KarDASHiansâ„¢

  [img src:"static/images/kard.png" className:"hvv" /]
  [/Slide]

   [Slide]
  ## Graph Terminology: Direction

  [DirectedGraph /]
 
  [/Slide]

  
   [Slide]
  ## Graph Terminology: Weights

  [WeightedGraph /]
 
  [/Slide] 
      [Slide]
  ## Graph Terminology: Node, Edges, Direction and Weight

  ![placekitten](http://placekitten.com/800/600)

    [Button onClick:`alert("buttz")`]
    Toggle Directed
    [/Button]
    [Button onClick:`alert("booty")`]
    Toggle Weighted
    [/Button]

  [/Slide]

  [Slide]
    ## Graph Respresentations A: Adjacency Matrix

  [/Slide]

  [Slide]
    ## Graph Representations B: Adjacency Lists 

    Example in *pseudo-code*:

    ```
    graph = {}
    graph["a"] = ["b", "c"]
    graph["b"] = ["c"]
    ```

  [/Slide]

  [Slide]
    ## Graph Operations (abstractions):
  [/Slide]

  [Slide]
    # Graph Traversal Algorithms

    * Breadth-first Traversal:

    [img src:"static/images/bfs.gif" className:"bfsGif" /]
  [/Slide]
  
  [Slide]
    # Breadth-first Search
    [var name:"bfs" value:`false ` /]
    [BfsGraph runBfs:bfs testColor:"red"/]
    [Button onClick:`bfs = !bfs `]
    BFS
    [/Button]
  [/Slide]
  [Slide]
    # Depth-first Search
    [img src:"static/images/dfs.gif" className:"dfsGif" /]
  [/Slide]
[Slide]
  ## Want more graph? 

* Shortest-path Problem:
* BFS for shortest-path (we already saw how it works!)
* Dijkstra's Algorithm
* Travelling Salesman Problem
[img src:"static/images/tour.png" className:"tour" /]

[/Slide]
  [Slide]
    # Thank You! XKCD 399:
    [img src:"static/images/tsp.png" className:"hvv" /]
  [/Slide]


[/Slideshow]